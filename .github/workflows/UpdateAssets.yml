name: Smart Update Release Assets

on:
  push:
    branches:
      - main   # run on any push to main

permissions:
  contents: write
  actions: read

jobs:
  update-assets:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Show Commit Info
        run: |
          echo "=== Commit Info ==="
          echo "Event before: ${{ github.event.before }}"
          echo "Event after:  ${{ github.sha }}"
          git log -1 --stat

      - name: Get Latest Release Info
        id: get_release
        uses: octokit/request-action@v2.x
        with:
          route: GET /repos/${{ github.repository }}/releases/latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Re-upload All Tracked Files with SHA256
        run: |
          assets_url=$(echo '${{ steps.get_release.outputs.data }}' | jq -r '.assets_url')

          tracked="Automated_Force_Update_Tool.bat Setup_File_Downloader.bat Windows_Defender_Exclusion_Tool.bat wasp-profile.properties worlds.txt"

          echo "=== Start Processing (ALL FILES) ==="
          echo "Tracked files: $tracked"

          for file in $tracked; do
            if [ ! -f "$file" ]; then
              echo "⚠️ $file not found in repo, skipping"
              continue
            fi

            if [ ! -s "$file" ]; then
              echo "⚠️ $file is empty, skipping"
              continue
            fi

            echo "Processing $file"
            ls -l "$file"
            head "$file" || true

            # Delete old asset if exists
            asset_id=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" "$assets_url" \
              | jq --arg name "$file" '.[] | select(.name == $name) | .id')
            if [ -n "$asset_id" ]; then
              echo "Deleting old asset: $file (ID: $asset_id)"
              curl -s -X DELETE -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                   "https://api.github.com/repos/${{ github.repository }}/releases/assets/$asset_id"
            fi

            # Generate SHA256
            baseName=$(basename "$file")
            baseName="${baseName%%.*}"
            shaFile="$baseName.sha256"
            sha256sum "$file" | awk '{print $1}' > "$shaFile"

            echo "--- $shaFile contents ---"
            cat "$shaFile"

            # Delete old checksum asset
            asset_id=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" "$assets_url" \
              | jq --arg name "$shaFile" '.[] | select(.name == $name) | .id')
            if [ -n "$asset_id" ]; then
              echo "Deleting old checksum asset: $shaFile (ID: $asset_id)"
              curl -s -X DELETE -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                   "https://api.github.com/repos/${{ github.repository }}/releases/assets/$asset_id"
            fi

            # Upload both file and checksum
            echo "Uploading $file and $shaFile"
            gh release upload ${{ fromJson(steps.get_release.outputs.data).tag_name }} "$file" "$shaFile" --clobber
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
