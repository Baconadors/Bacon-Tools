name: Smart Update Release Assets

on:
  push:
    branches:
      - main   # run on any push to main

permissions:
  contents: write
  actions: read

jobs:
  update-assets:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Show Commit Info
        run: |
          echo "=== Commit Info ==="
          echo "Event before: ${{ github.event.before }}"
          echo "Event after:  ${{ github.sha }}"
          git log -1 --stat

      - name: Get Changed Files
        id: changed
        run: |
          # Compare against previous commit or fallback to origin/main
          if git rev-parse HEAD^ >/dev/null 2>&1; then
            git diff --name-only HEAD^ HEAD > changed.txt
          else
            echo "" > changed.txt
          fi

          if [ ! -s changed.txt ]; then
            echo "Fallback diff against origin/main"
            git fetch origin main || true
            git diff --name-only origin/main...HEAD > changed.txt
          fi

          echo "=== Changed files detected ==="
          cat changed.txt

      - name: Set Output Variables for Changed Files
        id: vars
        run: |
          changedFiles=$(cat changed.txt | sort -u)
          echo "changed=$changedFiles" >> $GITHUB_OUTPUT
          echo "=== Changed files passed to upload step ==="
          echo "$changedFiles"

      - name: Get Latest Release Info
        id: get_release
        uses: octokit/request-action@v2.x
        with:
          route: GET /repos/${{ github.repository }}/releases/latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Delete and Re-upload Changed Files with SHA256
        run: |
          assets_url=$(echo '${{ steps.get_release.outputs.data }}' | jq -r '.assets_url')
          changedFiles="${{ steps.vars.outputs.changed }}"

          tracked="Automated_Force_Update_Tool.bat Setup_File_Downloader.bat Windows_Defender_Exclusion_Tool.bat wasp-profile.properties worlds.txt"

          echo "=== Start Processing ==="
          echo "Tracked files: $tracked"
          echo "Changed files: $changedFiles"

          for file in $changedFiles; do
            if [[ " $tracked " != *" $file "* ]]; then
              echo "Skipping $file (not in tracked set)"
              continue
            fi

            echo "Processing $file"

            if [ ! -f "$file" ]; then
              echo "⚠️ $file not found in checkout"
              continue
            fi

            if [ ! -s "$file" ]; then
              echo "⚠️ $file is empty"
              continue
            fi

            echo "--- File details ---"
            ls -l "$file"
            echo "--- First 10 lines of $file ---"
            head "$file"

            # Check existing asset
            echo "Looking for existing asset $file"
            asset_id=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" "$assets_url" \
              | jq --arg name "$file" '.[] | select(.name == $name) | .id')
            if [ -n "$asset_id" ]; then
              echo "Deleting old asset: $file (ID: $asset_id)"
              curl -s -X DELETE -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                   "https://api.github.com/repos/${{ github.repository }}/releases/assets/$asset_id"
            else
              echo "No old asset found for $file"
            fi

            # Generate SHA256
            baseName=$(basename "$file")
            baseName="${baseName%%.*}"
            shaFile="$baseName.sha256"
            sha256sum "$file" | awk '{print $1}' > "$shaFile"

            echo "--- $shaFile contents ---"
            cat "$shaFile"

            # Delete old checksum asset
            asset_id=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" "$assets_url" \
              | jq --arg name "$shaFile" '.[] | select(.name == $name) | .id')
            if [ -n "$asset_id" ]; then
              echo "Deleting old checksum asset: $shaFile (ID: $asset_id)"
              curl -s -X DELETE -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                   "https://api.github.com/repos/${{ github.repository }}/releases/assets/$asset_id"
            fi

            # Upload
            echo "Uploading $file and $shaFile"
            gh release upload ${{ fromJson(steps.get_release.outputs.data).tag_name }} "$file" "$shaFile" --clobber
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
